{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sedona SpatialBench","text":"<p>Sedona SpatialBench makes it easy to run spatial benchmarks on a realistic dataset with any query engine.</p> <p>The methodology is unbiased and the benchmarks in any environment to compare relative performance between runtimes.</p>"},{"location":"#why-spatialbench","title":"Why SpatialBench","text":"<p>SpatialBench is a geospatial benchmark for testing and optimizing spatial analytical query performance in database systems. Inspired by the SSB and NYC taxi data, it combines realistic urban mobility scenarios with a star schema extended with spatial attributes like pickup/dropoff points, zones, and building footprints.</p> <p>This design enables evaluation of the following geospatial operations:</p> <ul> <li>spatial joins</li> <li>distance queries</li> <li>aggregations</li> <li>point-in-polygon analysis</li> </ul> <p>Let\u2019s dive into the advantages of SpatialBench.</p>"},{"location":"#key-advantages","title":"Key advantages","text":"<ul> <li>Uses spatial datasets with geometry columns.</li> <li>Includes queries with different spatial predicates.</li> <li>Easily reproducible results.</li> <li>Includes a dataset generator to so results are reproducible.</li> <li>The scale factors of the datasets can be changed so that you can run the queries locally, in a data warehouse, or on a large cluster in the cloud.</li> <li>All the specifications used to run the benchmarks are documented, and the methodology is unbiased.</li> <li>The code is open source, allowing the community to provide feedback and keep the benchmarks up-to-date and reliable over time.</li> </ul>"},{"location":"#generate-synthetic-data","title":"Generate synthetic data","text":"<p>Here\u2019s how you can install the synthetic data generator:</p> <pre><code>cargo install --path ./spatialbench-cli\n</code></pre> <p>Here\u2019s how you can generate the synthetic dataset:</p> <pre><code>spatialbench-cli -s 1 --format=parquet\n</code></pre> <p>See the project repository README for the complete set of straightforward data generation instructions.</p>"},{"location":"#example-query","title":"Example query","text":"<p>Here\u2019s an example query that counts the number of trips that start within 500 meters of each building:</p> <pre><code>SELECT\n    b.b_buildingkey,\n    b.b_name,\n    COUNT(*) AS nearby_pickup_count\nFROM trip t\nJOIN building b\nON ST_DWithin(t.t_pickup_loc, b.b_boundary, 500)\nGROUP BY b.b_buildingkey, b.b_name\nORDER BY nearby_pickup_count DESC;\n</code></pre> <p>This query performs a distance join, followed by an aggregation.  It\u2019s a great example of a query that\u2019s useful for performance benchmarking a spatial engine that can process vector geometries.</p>"},{"location":"#join-the-community","title":"Join the community","text":"<p>Feel free to start a GitHub Discussion or join the Discord community to ask the developers any questions you may have.</p> <p>We look forward to collaborating with you on these benchmarks!</p>"},{"location":"overview-methodology/","title":"SpatialBench Overview and Methodology","text":""},{"location":"overview-methodology/#todo","title":"TODO","text":""}]}